openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/consumer/book:
    post:
      operationId: api_consumer_book_create
      description: |-
        View to create a booking

        Request types:
            POST
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
  /api/consumer/book/{id}:
    get:
      operationId: api_consumer_book_retrieve
      description: |-
        View to retrieve, update and delete a booking

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    put:
      operationId: api_consumer_book_update
      description: |-
        View to retrieve, update and delete a booking

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    patch:
      operationId: api_consumer_book_partial_update
      description: |-
        View to retrieve, update and delete a booking

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTransaction'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: ''
    delete:
      operationId: api_consumer_book_destroy
      description: |-
        View to retrieve, update and delete a booking

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/consumer/favourite:
    post:
      operationId: api_consumer_favourite_create
      description: |-
        View to favourite a parking space

        Request types:
            POST
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Favourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Favourite'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
          description: ''
  /api/consumer/favourite/{id}:
    get:
      operationId: api_consumer_favourite_retrieve
      description: |-
        View to retrieve, update and delete a favourite

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
          description: ''
    put:
      operationId: api_consumer_favourite_update
      description: |-
        View to retrieve, update and delete a favourite

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Favourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Favourite'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
          description: ''
    patch:
      operationId: api_consumer_favourite_partial_update
      description: |-
        View to retrieve, update and delete a favourite

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFavourite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFavourite'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favourite'
          description: ''
    delete:
      operationId: api_consumer_favourite_destroy
      description: |-
        View to retrieve, update and delete a favourite

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/consumer/favourite/all:
    get:
      operationId: api_consumer_favourite_all_list
      description: |-
        View to retrieve all favourites from a consumer

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedFavouriteList'
          description: ''
  /api/consumer/history:
    get:
      operationId: api_consumer_history_list
      description: |-
        View to retrieve all bookings from a consumer

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionList'
          description: ''
  /api/consumer/review:
    post:
      operationId: api_consumer_review_create
      description: |-
        View to create a review

        Request types:
            POST
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/consumer/review/{id}:
    get:
      operationId: api_consumer_review_retrieve
      description: |-
        View to retrieve, update and delete a review

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    put:
      operationId: api_consumer_review_update
      description: |-
        View to retrieve, update and delete a review

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Review'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: api_consumer_review_partial_update
      description: |-
        View to retrieve, update and delete a review

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReview'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: api_consumer_review_destroy
      description: |-
        View to retrieve, update and delete a review

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/consumer/vehicle:
    post:
      operationId: api_consumer_vehicle_create
      description: |-
        View to create a vehicle

        Request types:
            POST
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
  /api/consumer/vehicle/{id}:
    get:
      operationId: api_consumer_vehicle_retrieve
      description: |-
        View to retrieve, update and delete a vehicle

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    put:
      operationId: api_consumer_vehicle_update
      description: |-
        View to retrieve, update and delete a vehicle

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vehicle'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    patch:
      operationId: api_consumer_vehicle_partial_update
      description: |-
        View to retrieve, update and delete a vehicle

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVehicle'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
          description: ''
    delete:
      operationId: api_consumer_vehicle_destroy
      description: |-
        View to retrieve, update and delete a vehicle

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/consumer/vehicle/all:
    get:
      operationId: api_consumer_vehicle_all_list
      description: |-
        View to retrieve all vehicles from a user

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVehicleList'
          description: ''
  /api/delete/user:
    delete:
      operationId: api_delete_user_destroy
      description: Deletes user from database
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/provider/history:
    get:
      operationId: api_provider_history_list
      description: |-
        View to retrieve all bookings from a provider

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionList'
          description: ''
  /api/provider/image/{parkingID}:
    post:
      operationId: api_provider_image_create
      description: |-
        View to upload an image

        Request types:
            POST
      parameters:
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
  /api/provider/image/{id}:
    get:
      operationId: api_provider_image_retrieve
      description: |-
        View to retrieve, update and delete an image

        Request types:
            GET'
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    put:
      operationId: api_provider_image_update
      description: |-
        View to retrieve, update and delete an image

        Request types:
            GET'
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    patch:
      operationId: api_provider_image_partial_update
      description: |-
        View to retrieve, update and delete an image

        Request types:
            GET'
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedImage'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
          description: ''
    delete:
      operationId: api_provider_image_destroy
      description: |-
        View to retrieve, update and delete an image

        Request types:
            GET'
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/provider/parking:
    post:
      operationId: api_provider_parking_create
      description: |-
        View to create a parking space

        Request types:
            POST
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpace'
          description: ''
  /api/provider/parking/{id}:
    get:
      operationId: api_provider_parking_retrieve
      description: |-
        View to retrieve, update and delete a parking space

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpace'
          description: ''
    put:
      operationId: api_provider_parking_update
      description: |-
        View to retrieve, update and delete a parking space

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ParkingSpace'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpace'
          description: ''
    patch:
      operationId: api_provider_parking_partial_update
      description: |-
        View to retrieve, update and delete a parking space

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedParkingSpace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedParkingSpace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedParkingSpace'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingSpace'
          description: ''
    delete:
      operationId: api_provider_parking_destroy
      description: |-
        View to retrieve, update and delete a parking space

        Request types:
            GET
            PUT
            PATCH
            DELETE
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/provider/parking/all:
    get:
      operationId: api_provider_parking_all_list
      description: |-
        View to retrieve all parking spaces owned by the user

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/approved:
    get:
      operationId: api_provider_parking_approved_list
      description: |-
        View to retrieve all parking spaces owned by the user that are approved

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/bookings/{parkingID}:
    get:
      operationId: api_provider_parking_bookings_list
      description: |-
        View to retrieve all bookings associated with a Parking Space

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTransactionList'
          description: ''
  /api/provider/parking/cancelled:
    get:
      operationId: api_provider_parking_cancelled_list
      description: |-
        View to retrieve all parking spaces owned by the user that are cancelled

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/images/{parkingID}:
    get:
      operationId: api_provider_parking_images_list
      description: |-
        View to retrieve all images associated with a Parking Space

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
          description: ''
  /api/provider/parking/pending:
    get:
      operationId: api_provider_parking_pending_list
      description: |-
        View to retrieve all parking spaces owned by the user that are pending

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/rejected:
    get:
      operationId: api_provider_parking_rejected_list
      description: |-
        View to retrieve all parking spaces owned by the user that are rejected

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /api/provider/parking/reviews/{parkingID}:
    get:
      operationId: api_provider_parking_reviews_list
      description: |-
        View to retrieve all reviews associated with a Parking Space

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: path
        name: parkingID
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
  /api/provider/parking/search/:
    get:
      operationId: api_provider_parking_search_list
      description: |-
        View to retrieve all parking spaces matching search criteria

        Request types:
            GET
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: price__gte
        schema:
          type: integer
      - in: query
        name: price__lte
        schema:
          type: integer
      - in: query
        name: rating__gte
        schema:
          type: number
      - in: query
        name: rating__lte
        schema:
          type: number
      - in: query
        name: size
        schema:
          type: array
          items:
            type: string
            enum:
            - 4WD/SUV
            - Hatchback
            - Sedan
            - Van
        explode: true
        style: form
      tags:
      - api
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedParkingSpaceList'
          description: ''
  /dj-rest-auth/account-confirm-email/:
    post:
      operationId: dj_rest_auth_account_confirm_email_create
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - dj-rest-auth
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/confirm/{uidb64}/{token}/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create_2
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/registration/:
    post:
      operationId: dj_rest_auth_registration_create
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegister'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/registration/verify-email/:
    post:
      operationId: dj_rest_auth_registration_verify_email_create
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/token/refresh/:
    post:
      operationId: dj_rest_auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /dj-rest-auth/token/verify/:
    post:
      operationId: dj_rest_auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtHeaderAuth: []
        jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    CustomRegister:
      type: object
      description: |-
        Custom registration serializer for CustomUser model extending the default dj_rest_auth registration serializer

        Additional fields:
            phone_number (CharField: str): Phone number of user
            first_name (CharField: str): First name of user
            last_name (CharField: str): Last name of user

        Methods:
            save: Overrides default save method to add additional fields to user
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        phone_number:
          type: string
          maxLength: 20
        first_name:
          type: string
          maxLength: 20
        last_name:
          type: string
          maxLength: 20
      required:
      - email
      - first_name
      - last_name
      - password1
      - password2
      - phone_number
      - username
    Favourite:
      type: object
      description: |-
        Custom serializer for favourites extending the default ModelSerializer

        Fields:
            consumer (PrimaryKeyRelatedField: CustomUser): Consumer of favourites
            parkingSpace (PrimaryKeyRelatedField: ParkingSpace): Favourited parking space
      properties:
        consumer:
          type: integer
        parkingSpace:
          type: integer
        pk:
          type: integer
          readOnly: true
          title: ID
        streetAddress:
          type: string
        city:
          type: string
        state:
          type: string
        postcode:
          type: string
        cost:
          type: integer
        notes:
          type: string
        parkingSpaceSize:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
      required:
      - consumer
      - parkingSpace
      - pk
    Image:
      type: object
      description: |-
        Custom serializer for parking space images extending the default ModelSerializer

        Fields:
            image (CharField: str): Image of parking space

        Subclasses:
            Meta: Meta class for ImageSerializer
      properties:
        image_data:
          type: string
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - image_data
      - pk
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
      - access_token
      - refresh_token
      - user
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PaginatedFavouriteList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Favourite'
    PaginatedImageList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    PaginatedParkingSpaceList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/ParkingSpace'
    PaginatedReviewList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    PaginatedTransactionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
    PaginatedVehicleList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
    ParkingSpace:
      type: object
      description: |-
        Custom serializer for parking space extending the default ModelSerializer to add images

        Fields:
            images (ListField: ImageSerializer): List of images of parking space
            provider (PrimaryKeyRelatedField: CustomUser): Provider of parking space

        Subclasses:
            Meta: Meta class for ParkingSpaceSerializer

        Methods:
            validate: Overrides default validate method to check parking space availability
            create: Overrides default create method to add images to parking space
      properties:
        provider:
          type: integer
        streetAddress:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 3
        postcode:
          type: string
          maxLength: 4
        price:
          type: integer
        size:
          $ref: '#/components/schemas/SizeEnum'
        notes:
          type: string
          maxLength: 10000
        longitude:
          type: number
          format: double
          readOnly: true
          nullable: true
        latitude:
          type: number
          format: double
          readOnly: true
          nullable: true
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        latestTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
          readOnly: true
          nullable: true
        n_ratings:
          type: integer
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - avg_rating
      - city
      - endTime
      - images
      - is_active
      - latestTime
      - latitude
      - longitude
      - n_ratings
      - notes
      - pk
      - postcode
      - price
      - provider
      - startTime
      - state
      - streetAddress
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedFavourite:
      type: object
      description: |-
        Custom serializer for favourites extending the default ModelSerializer

        Fields:
            consumer (PrimaryKeyRelatedField: CustomUser): Consumer of favourites
            parkingSpace (PrimaryKeyRelatedField: ParkingSpace): Favourited parking space
      properties:
        consumer:
          type: integer
        parkingSpace:
          type: integer
        pk:
          type: integer
          readOnly: true
          title: ID
        streetAddress:
          type: string
        city:
          type: string
        state:
          type: string
        postcode:
          type: string
        cost:
          type: integer
        notes:
          type: string
        parkingSpaceSize:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    PatchedImage:
      type: object
      description: |-
        Custom serializer for parking space images extending the default ModelSerializer

        Fields:
            image (CharField: str): Image of parking space

        Subclasses:
            Meta: Meta class for ImageSerializer
      properties:
        image_data:
          type: string
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedParkingSpace:
      type: object
      description: |-
        Custom serializer for parking space extending the default ModelSerializer to add images

        Fields:
            images (ListField: ImageSerializer): List of images of parking space
            provider (PrimaryKeyRelatedField: CustomUser): Provider of parking space

        Subclasses:
            Meta: Meta class for ParkingSpaceSerializer

        Methods:
            validate: Overrides default validate method to check parking space availability
            create: Overrides default create method to add images to parking space
      properties:
        provider:
          type: integer
        streetAddress:
          type: string
          maxLength: 100
        city:
          type: string
          maxLength: 100
        state:
          type: string
          maxLength: 3
        postcode:
          type: string
          maxLength: 4
        price:
          type: integer
        size:
          $ref: '#/components/schemas/SizeEnum'
        notes:
          type: string
          maxLength: 10000
        longitude:
          type: number
          format: double
          readOnly: true
          nullable: true
        latitude:
          type: number
          format: double
          readOnly: true
          nullable: true
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        latestTime:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        avg_rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
          readOnly: true
          nullable: true
        n_ratings:
          type: integer
          readOnly: true
          nullable: true
        is_active:
          type: boolean
          readOnly: true
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedReview:
      type: object
      description: |-
        Custom serializer for reviews extending the default ModelSerializer

        Fields:
            consumer (PrimaryKeyRelatedField: CustomUser): Review author
            parkingSpace (PrimaryKeyRelatedField: ParkingSpace): Reviewed parking space

        Subclasses:
            Meta: Meta class for ReviewSerializer
      properties:
        parkingSpace:
          type: integer
        consumer:
          type: string
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        comment:
          type: string
        publishDate:
          type: string
          format: date-time
          readOnly: true
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedTransaction:
      type: object
      description: |-
        Custom serializer for transactions extending the default ModelSerializer

        Fields:
            provider (PrimaryKeyRelatedField: CustomUser): Provider of transaction
            consumer (PrimaryKeyRelatedField: CustomUser): Consumer of transaction
            vehicle (PrimaryKeyRelatedField: Vehicle): Vehicle of transaction
            parkingSpace (PrimaryKeyRelatedField: ParkingSpace): Parking space of transaction
            streetAddress (CharField: str): Street address of booked parking space
            city (CharField: str): City of booked parking space
            state (CharField: str): State of booked parking space
            postcode (CharField: str): Postcode of booked parking space
            consumerName (CharField: str): Name of consumer
            consumerPhone (CharField: str): Phone number of consumer
            consumerEmail (CharField: str): Email of consumer
            parkingSpaceSize (CharField: str): Size of booked parking space

        Subclasses:
            Meta: Meta class for TransactionSerializer

        Methods:
            validate: Overrides default validate method to check parking space availability
      properties:
        provider:
          type: integer
        consumer:
          type: integer
        vehicle:
          type: integer
        parkingSpace:
          type: integer
        streetAddress:
          type: string
        city:
          type: string
        state:
          type: string
        postcode:
          type: string
        consumerName:
          type: string
        consumerPhone:
          type: string
        consumerEmail:
          type: string
        publishDate:
          type: string
          format: date-time
          readOnly: true
        parkingSpaceSize:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        totalCost:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedUser:
      type: object
      description: |-
        Serializer for CustomUser model

        Subclasses:
            Meta: Meta class for UserSerializer
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        phone_number:
          type: string
          maxLength: 20
        card_number:
          type: string
          maxLength: 16
        expiry_date:
          type: string
          maxLength: 5
        cvc:
          type: string
          maxLength: 3
        bsb:
          type: string
          maxLength: 6
        account_number:
          type: string
          maxLength: 10
        account_name:
          type: string
          maxLength: 100
        is_staff:
          type: boolean
        pk:
          type: integer
          readOnly: true
          title: ID
    PatchedVehicle:
      type: object
      description: |-
        Custom serializer for vehicle extending the default ModelSerializer

        Fields:
            user (PrimaryKeyRelatedField: CustomUser): Owner of vehicle

        Subclasses:
            Meta: Meta class for VehicleSerializer
      properties:
        user:
          type: integer
        carMake:
          type: string
          maxLength: 100
        carModel:
          type: string
          maxLength: 100
        carYear:
          type: integer
        carColour:
          type: string
          maxLength: 100
        carRego:
          type: string
          maxLength: 7
        pk:
          type: integer
          readOnly: true
          title: ID
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Review:
      type: object
      description: |-
        Custom serializer for reviews extending the default ModelSerializer

        Fields:
            consumer (PrimaryKeyRelatedField: CustomUser): Review author
            parkingSpace (PrimaryKeyRelatedField: ParkingSpace): Reviewed parking space

        Subclasses:
            Meta: Meta class for ReviewSerializer
      properties:
        parkingSpace:
          type: integer
        consumer:
          type: string
        rating:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,1})?$
        comment:
          type: string
        publishDate:
          type: string
          format: date-time
          readOnly: true
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - comment
      - consumer
      - parkingSpace
      - pk
      - publishDate
      - rating
    SizeEnum:
      enum:
      - Hatchback
      - Sedan
      - 4WD/SUV
      - Van
      type: string
    StatusEnum:
      enum:
      - pending
      - approved
      - cancelled
      - rejected
      type: string
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    Transaction:
      type: object
      description: |-
        Custom serializer for transactions extending the default ModelSerializer

        Fields:
            provider (PrimaryKeyRelatedField: CustomUser): Provider of transaction
            consumer (PrimaryKeyRelatedField: CustomUser): Consumer of transaction
            vehicle (PrimaryKeyRelatedField: Vehicle): Vehicle of transaction
            parkingSpace (PrimaryKeyRelatedField: ParkingSpace): Parking space of transaction
            streetAddress (CharField: str): Street address of booked parking space
            city (CharField: str): City of booked parking space
            state (CharField: str): State of booked parking space
            postcode (CharField: str): Postcode of booked parking space
            consumerName (CharField: str): Name of consumer
            consumerPhone (CharField: str): Phone number of consumer
            consumerEmail (CharField: str): Email of consumer
            parkingSpaceSize (CharField: str): Size of booked parking space

        Subclasses:
            Meta: Meta class for TransactionSerializer

        Methods:
            validate: Overrides default validate method to check parking space availability
      properties:
        provider:
          type: integer
        consumer:
          type: integer
        vehicle:
          type: integer
        parkingSpace:
          type: integer
        streetAddress:
          type: string
        city:
          type: string
        state:
          type: string
        postcode:
          type: string
        consumerName:
          type: string
        consumerPhone:
          type: string
        consumerEmail:
          type: string
        publishDate:
          type: string
          format: date-time
          readOnly: true
        parkingSpaceSize:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        totalCost:
          type: string
          format: decimal
          pattern: ^-?\d{0,4}(?:\.\d{0,2})?$
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - consumer
      - endTime
      - parkingSpace
      - pk
      - provider
      - publishDate
      - startTime
      - totalCost
      - vehicle
    User:
      type: object
      description: |-
        Serializer for CustomUser model

        Subclasses:
            Meta: Meta class for UserSerializer
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        phone_number:
          type: string
          maxLength: 20
        card_number:
          type: string
          maxLength: 16
        expiry_date:
          type: string
          maxLength: 5
        cvc:
          type: string
          maxLength: 3
        bsb:
          type: string
          maxLength: 6
        account_number:
          type: string
          maxLength: 10
        account_name:
          type: string
          maxLength: 100
        is_staff:
          type: boolean
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - account_name
      - account_number
      - bsb
      - card_number
      - cvc
      - expiry_date
      - first_name
      - last_name
      - phone_number
      - pk
      - username
    Vehicle:
      type: object
      description: |-
        Custom serializer for vehicle extending the default ModelSerializer

        Fields:
            user (PrimaryKeyRelatedField: CustomUser): Owner of vehicle

        Subclasses:
            Meta: Meta class for VehicleSerializer
      properties:
        user:
          type: integer
        carMake:
          type: string
          maxLength: 100
        carModel:
          type: string
          maxLength: 100
        carYear:
          type: integer
        carColour:
          type: string
          maxLength: 100
        carRego:
          type: string
          maxLength: 7
        pk:
          type: integer
          readOnly: true
          title: ID
      required:
      - carColour
      - carMake
      - carModel
      - carRego
      - carYear
      - pk
      - user
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
      - key
  securitySchemes:
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: my-app-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
